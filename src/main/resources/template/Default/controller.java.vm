##定义初始变量
#set($tableName = $tool.append($tableInfo.name, "Controller"))
#set($serviceName = $tool.append($!tool.firstLowerCase($tableInfo.name), "Service"))
#set($user = "user")
#set($date = "new Date()")

##定义实体对象名
#set($entityName = $!tool.firstLowerCase($!tableInfo.name))
##设置回调
$!callback.setFileName($tool.append($tableName, ".java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/controller"))
##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;

import $!{tableInfo.savePackageName}.bean.$!{tableInfo.name};
import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;
import com.qftx.base.bean.BaseJsonResult;
import javax.annotation.Resource;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.qftx.shiro.ShiroUser;
import com.qftx.shiro.ShiroUtil;
import java.util.Date;
import java.util.List;
import com.github.pagehelper.PageInfo;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import com.github.xiaoymin.knife4j.annotations.DynamicParameter;
import com.github.xiaoymin.knife4j.annotations.DynamicParameters;
import com.github.xiaoymin.knife4j.annotations.DynamicResponseParameters;


/**
 * $!{tableInfo.comment}($!{tableInfo.name})表控制层
 *
 * @author $!author
 * @since $!time.currTime()
 */
@RestController
@RequestMapping("/$!tool.firstLowerCase($tableInfo.name)")
@Slf4j
@Api(value = "$!tool.firstLowerCase($tableInfo.name)", tags = "$!{tableInfo.comment}")
public class $!{tableName} {
    /**
     * 服务对象
     */
    @Resource
    private $!{tableInfo.name}Service $!{serviceName};

    /**
     * 列表Json-分页
     */
    @RequestMapping(value = "/listPageJson")
    @DynamicResponseParameters(name = "$!{tableInfo.name}_listPageJson", properties = {
            @DynamicParameter(name = "data", dataTypeClass = $!{tableInfo.name}.class),
    })
    @ApiOperation(value = "列表页面（分页）", httpMethod = "GET")
    public BaseJsonResult listPageJson($!tableInfo.name $!{entityName}){
        ShiroUser $user = ShiroUtil.getShiroUser();
        try{
            $!{entityName}.setOrgId($!{user}.getOrgId());
            PageInfo<$!tableInfo.name> page = $!{serviceName}.findListPage($!{entityName});
            return BaseJsonResult.success(page);
        }catch(Exception e){
            log.error("$!{tableInfo.comment}分页列表异常", e);
            return BaseJsonResult.error("异常");
        }
    }

    /**
    * 列表Json-不分页
    */
    @RequestMapping(value = "/listJson")
    @DynamicResponseParameters(name = "$!{tableInfo.name}_listJson", properties = {
            @DynamicParameter(name = "data", dataTypeClass = $!{tableInfo.name}.class),
    })
    @ApiOperation(value = "列表页（全部）", httpMethod = "GET")
    public BaseJsonResult listJson($!tableInfo.name $!{entityName}){
        ShiroUser $user = ShiroUtil.getShiroUser();
        $!{entityName}.setOrgId($!{user}.getOrgId());
        List<$!tableInfo.name> list= $!{serviceName}.findByCondtion($!{entityName});
        return BaseJsonResult.success(list);
    }

    /**
     * 详情
     */
    @RequestMapping(value = "/infoJson")
    @DynamicResponseParameters(name = "$!{tableInfo.name}_infoJson", properties = {
            @DynamicParameter(name = "data", dataTypeClass = $!{tableInfo.name}.class),
    })
    @ApiOperation(value = "详情页面", httpMethod = "GET")
    public BaseJsonResult infoJson($!tableInfo.name $!{entityName}){
        ShiroUser $user = ShiroUtil.getShiroUser();
        if(!StringUtils.isBlank($!{entityName}.getId())){
            $!{entityName}.setOrgId($!{user}.getOrgId());
            $!{entityName} = $!{serviceName}.getByCondtion($!{entityName});
        }
        return BaseJsonResult.success($!{entityName});
    }

    /**
     * 保存数据（包含新增和编辑）
     */
    @RequestMapping(value = "/save")
    @DynamicParameters(name = "$!{tableInfo.name}_save", properties = {
            @DynamicParameter(name = "data", dataTypeClass = $!{tableInfo.name}.class),
    })
    @ApiOperation(value = "保存方法", httpMethod = "POST")
    public BaseJsonResult save(@RequestBody $!tableInfo.name $!{entityName}){
        ShiroUser $user = ShiroUtil.getShiroUser();
        if(StringUtils.isBlank($!{entityName}.getId())){
            $!{serviceName}.insert($!{entityName}, $user);
        }else{
            $!{entityName}.setUpdateAcc($!{user}.getAccount());
            $!{entityName}.setOrgId($!{user}.getOrgId());
            $!{entityName}.setUpdateTime($date);
            $!{serviceName}.update($!{entityName});
        }
        return BaseJsonResult.success();
    }

    /**
     * 删除
     */
    @RequestMapping(value = "/delete")
    @ApiOperationSupport(includeParameters = {"$!{entityName}.id"})
    @ApiOperation(value = "删除方法", httpMethod = "POST")
    public BaseJsonResult delete(@RequestBody $!tableInfo.name $!{entityName}){
        ShiroUser $user = ShiroUtil.getShiroUser();
        if(StringUtils.isBlank($!{entityName}.getId())){
            return BaseJsonResult.error("id 不能为空！");
        }else{
            $!{entityName}.setIsDel(1);
            $!{entityName}.setOrgId($!{user}.getOrgId());
            $!{serviceName}.del($!{entityName});
            return BaseJsonResult.success();
        }
    }
}
